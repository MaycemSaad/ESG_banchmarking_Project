{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 300000 // 5 minutes timeout for large PDF processing\n});\n\n// Intercepteur pour les erreurs de réseau\napi.interceptors.response.use(response => response, error => {\n  if (error.code === 'ECONNREFUSED') {\n    throw new Error('Cannot connect to backend server. Make sure the Flask server is running on port 5000.');\n  }\n  if (error.response) {\n    // Server responded with error status\n    throw new Error(error.response.data.error || `Server error: ${error.response.status}`);\n  } else if (error.request) {\n    // Network error\n    throw new Error('Network error: Unable to connect to server');\n  } else {\n    // Other error\n    throw new Error('An unexpected error occurred');\n  }\n});\nexport const apiService = {\n  // Health check\n  healthCheck: () => api.get('/health'),\n  // Process PDF\n  processPDF: (kpiFile, pdfFile, minConfidence = 0.3, rerunIfExists = false) => {\n    const formData = new FormData();\n    formData.append('kpi_file', kpiFile);\n    formData.append('pdf_file', pdfFile);\n    formData.append('min_confidence', minConfidence.toString());\n    formData.append('rerun_if_exists', rerunIfExists.toString());\n    return api.post('/process', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Get statistics\n  getStatistics: () => api.get('/statistics'),\n  // Get dashboard data\n  getDashboardData: (minConfidence = 0.3) => api.get('/dashboard', {\n    params: {\n      min_confidence: minConfidence\n    }\n  }),\n  // Get companies list\n  getCompanies: () => api.get('/companies'),\n  // Get company data\n  getCompanyData: (companyName, minConfidence = 0.3) => api.get(`/company/${encodeURIComponent(companyName)}`, {\n    params: {\n      min_confidence: minConfidence\n    }\n  }),\n  // Get comparison data\n  getComparisonData: (companies, compareBy = 'topic_fr', minConfidence = 0.3) => {\n    const params = new URLSearchParams();\n    companies.forEach(company => params.append('companies', company));\n    params.append('compare_by', compareBy);\n    params.append('min_confidence', minConfidence.toString());\n    return api.get('/comparison', {\n      params\n    });\n  },\n  // Export data\n  exportCSV: () => api.get('/export/csv', {\n    responseType: 'blob'\n  }),\n  exportExcel: () => api.get('/export/excel', {\n    responseType: 'blob'\n  }),\n  exportCompanyData: (companyName, format = 'csv') => api.get(`/export/company/${encodeURIComponent(companyName)}`, {\n    params: {\n      format\n    },\n    responseType: 'blob'\n  }),\n  // =========================================================================\n  // NOUVELLES MÉTHODES POUR LE CHATBOT ESG\n  // =========================================================================\n\n  // Chat avec l'assistant ESG\n  esgChat: (message, companyName = '') => {\n    return api.post('/esg-chat', {\n      message,\n      company_name: companyName\n    });\n  },\n  // Benchmarking entre entreprises\n  esgBenchmark: companies => {\n    return api.post('/esg-benchmark', {\n      companies\n    });\n  },\n  // Recommandations personnalisées\n  esgRecommendations: companyName => {\n    return api.post('/esg-recommendations', {\n      company_name: companyName\n    });\n  },\n  // Statut du chatbot\n  getChatbotStatus: () => api.get('/chatbot-status'),\n  // Upload de PDF pour analyse spécifique (si vous voulez l'ajouter plus tard)\n  uploadPDFForAnalysis: (pdfFile, companyName = '') => {\n    const formData = new FormData();\n    formData.append('file', pdfFile);\n    if (companyName) {\n      formData.append('company_name', companyName);\n    }\n    return api.post('/upload-pdf', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Chat avec un PDF spécifique (si vous voulez l'ajouter plus tard)\n  chatWithPDF: (message, fileId) => {\n    return api.post('/chat-with-pdf', {\n      message,\n      file_id: fileId\n    });\n  },\n  // Recherche sémantique dans les données ESG\n  semanticSearch: (query, topK = 5) => {\n    return api.post('/search', {\n      query,\n      top_k: topK\n    });\n  },\n  // Diagnostic du système (pour le debug)\n  debugVectorStore: () => api.get('/api/debug-vector-store'),\n  testDocumentSearch: (query, fileId) => {\n    return api.post('/api/test-document-search', {\n      query,\n      file_id: fileId\n    });\n  },\n  forceReloadIndex: () => api.post('/api/force-reload-index')\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","interceptors","response","use","error","code","Error","data","status","request","apiService","healthCheck","get","processPDF","kpiFile","pdfFile","minConfidence","rerunIfExists","formData","FormData","append","toString","post","headers","getStatistics","getDashboardData","params","min_confidence","getCompanies","getCompanyData","companyName","encodeURIComponent","getComparisonData","companies","compareBy","URLSearchParams","forEach","company","exportCSV","responseType","exportExcel","exportCompanyData","format","esgChat","message","company_name","esgBenchmark","esgRecommendations","getChatbotStatus","uploadPDFForAnalysis","chatWithPDF","fileId","file_id","semanticSearch","query","topK","top_k","debugVectorStore","testDocumentSearch","forceReloadIndex"],"sources":["C:/Users/informasud/Desktop/Projets/ESG_Banchmarking_Project/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 300000, // 5 minutes timeout for large PDF processing\r\n});\r\n\r\n// Intercepteur pour les erreurs de réseau\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.code === 'ECONNREFUSED') {\r\n      throw new Error('Cannot connect to backend server. Make sure the Flask server is running on port 5000.');\r\n    }\r\n    if (error.response) {\r\n      // Server responded with error status\r\n      throw new Error(error.response.data.error || `Server error: ${error.response.status}`);\r\n    } else if (error.request) {\r\n      // Network error\r\n      throw new Error('Network error: Unable to connect to server');\r\n    } else {\r\n      // Other error\r\n      throw new Error('An unexpected error occurred');\r\n    }\r\n  }\r\n);\r\n\r\nexport const apiService = {\r\n  // Health check\r\n  healthCheck: () => api.get('/health'),\r\n\r\n  // Process PDF\r\n  processPDF: (kpiFile, pdfFile, minConfidence = 0.3, rerunIfExists = false) => {\r\n    const formData = new FormData();\r\n    formData.append('kpi_file', kpiFile);\r\n    formData.append('pdf_file', pdfFile);\r\n    formData.append('min_confidence', minConfidence.toString());\r\n    formData.append('rerun_if_exists', rerunIfExists.toString());\r\n\r\n    return api.post('/process', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n  },\r\n\r\n  // Get statistics\r\n  getStatistics: () => api.get('/statistics'),\r\n\r\n  // Get dashboard data\r\n  getDashboardData: (minConfidence = 0.3) => \r\n    api.get('/dashboard', { \r\n      params: { min_confidence: minConfidence }\r\n    }),\r\n\r\n  // Get companies list\r\n  getCompanies: () => api.get('/companies'),\r\n\r\n  // Get company data\r\n  getCompanyData: (companyName, minConfidence = 0.3) =>\r\n    api.get(`/company/${encodeURIComponent(companyName)}`, {\r\n      params: { min_confidence: minConfidence }\r\n    }),\r\n\r\n  // Get comparison data\r\n  getComparisonData: (companies, compareBy = 'topic_fr', minConfidence = 0.3) => {\r\n    const params = new URLSearchParams();\r\n    companies.forEach(company => params.append('companies', company));\r\n    params.append('compare_by', compareBy);\r\n    params.append('min_confidence', minConfidence.toString());\r\n    \r\n    return api.get('/comparison', { params });\r\n  },\r\n\r\n  // Export data\r\n  exportCSV: () => \r\n    api.get('/export/csv', { responseType: 'blob' }),\r\n\r\n  exportExcel: () =>\r\n    api.get('/export/excel', { responseType: 'blob' }),\r\n\r\n  exportCompanyData: (companyName, format = 'csv') =>\r\n    api.get(`/export/company/${encodeURIComponent(companyName)}`, {\r\n      params: { format },\r\n      responseType: 'blob'\r\n    }),\r\n\r\n  // =========================================================================\r\n  // NOUVELLES MÉTHODES POUR LE CHATBOT ESG\r\n  // =========================================================================\r\n\r\n  // Chat avec l'assistant ESG\r\n  esgChat: (message, companyName = '') => {\r\n    return api.post('/esg-chat', {\r\n      message,\r\n      company_name: companyName\r\n    });\r\n  },\r\n\r\n  // Benchmarking entre entreprises\r\n  esgBenchmark: (companies) => {\r\n    return api.post('/esg-benchmark', {\r\n      companies\r\n    });\r\n  },\r\n\r\n  // Recommandations personnalisées\r\n  esgRecommendations: (companyName) => {\r\n    return api.post('/esg-recommendations', {\r\n      company_name: companyName\r\n    });\r\n  },\r\n\r\n  // Statut du chatbot\r\n  getChatbotStatus: () => api.get('/chatbot-status'),\r\n\r\n  // Upload de PDF pour analyse spécifique (si vous voulez l'ajouter plus tard)\r\n  uploadPDFForAnalysis: (pdfFile, companyName = '') => {\r\n    const formData = new FormData();\r\n    formData.append('file', pdfFile);\r\n    if (companyName) {\r\n      formData.append('company_name', companyName);\r\n    }\r\n\r\n    return api.post('/upload-pdf', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n  },\r\n\r\n  // Chat avec un PDF spécifique (si vous voulez l'ajouter plus tard)\r\n  chatWithPDF: (message, fileId) => {\r\n    return api.post('/chat-with-pdf', {\r\n      message,\r\n      file_id: fileId\r\n    });\r\n  },\r\n\r\n  // Recherche sémantique dans les données ESG\r\n  semanticSearch: (query, topK = 5) => {\r\n    return api.post('/search', {\r\n      query,\r\n      top_k: topK\r\n    });\r\n  },\r\n\r\n  // Diagnostic du système (pour le debug)\r\n  debugVectorStore: () => api.get('/api/debug-vector-store'),\r\n  \r\n  testDocumentSearch: (query, fileId) => {\r\n    return api.post('/api/test-document-search', {\r\n      query,\r\n      file_id: fileId\r\n    });\r\n  },\r\n\r\n  forceReloadIndex: () => api.post('/api/force-reload-index')\r\n};\r\n\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
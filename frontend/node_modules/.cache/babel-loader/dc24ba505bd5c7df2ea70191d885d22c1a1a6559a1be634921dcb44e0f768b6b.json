{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://127.0.0.1:5000/api'; // Utilisez 127.0.0.1 au lieu de localhost\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 300000\n});\n\n// Intercepteur pour les erreurs de réseau\napi.interceptors.response.use(response => response, error => {\n  if (error.code === 'ECONNREFUSED') {\n    throw new Error('Cannot connect to backend server. Make sure the Flask server is running on port 5000.');\n  }\n  throw error;\n});\nexport const apiService = {\n  healthCheck: () => api.get('/health'),\n  processPDF: (kpiFile, pdfFile, minConfidence = 0.5, rerunIfExists = false) => {\n    const formData = new FormData();\n    formData.append('kpi_file', kpiFile);\n    formData.append('pdf_file', pdfFile);\n    formData.append('min_confidence', minConfidence.toString());\n    formData.append('rerun_if_exists', rerunIfExists.toString());\n    return api.post('/process', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  getStatistics: () => api.get('/statistics'),\n  getDashboardData: (minConfidence = 0.5) => api.get('/dashboard', {\n    params: {\n      min_confidence: minConfidence\n    },\n    timeout: 10000\n  }),\n  getCompanies: () => api.get('/companies'),\n  getCompanyData: (companyName, minConfidence = 0.5) => api.get(`/company/${encodeURIComponent(companyName)}`, {\n    params: {\n      min_confidence: minConfidence\n    }\n  }),\n  getComparisonData: (companies, compareBy = 'topic_fr', minConfidence = 0.5) => {\n    const params = new URLSearchParams();\n    companies.forEach(company => params.append('companies', company));\n    params.append('compare_by', compareBy);\n    params.append('min_confidence', minConfidence.toString());\n    return api.get('/comparison', {\n      params\n    });\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","interceptors","response","use","error","code","Error","apiService","healthCheck","get","processPDF","kpiFile","pdfFile","minConfidence","rerunIfExists","formData","FormData","append","toString","post","headers","getStatistics","getDashboardData","params","min_confidence","getCompanies","getCompanyData","companyName","encodeURIComponent","getComparisonData","companies","compareBy","URLSearchParams","forEach","company"],"sources":["C:/Users/informasud/Desktop/Projets/ESG_Banchmarking_Project/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';  // Utilisez 127.0.0.1 au lieu de localhost\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 300000,\r\n});\r\n\r\n// Intercepteur pour les erreurs de réseau\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.code === 'ECONNREFUSED') {\r\n      throw new Error('Cannot connect to backend server. Make sure the Flask server is running on port 5000.');\r\n    }\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport const apiService = {\r\n  healthCheck: () => api.get('/health'),\r\n  \r\n  processPDF: (kpiFile, pdfFile, minConfidence = 0.5, rerunIfExists = false) => {\r\n    const formData = new FormData();\r\n    formData.append('kpi_file', kpiFile);\r\n    formData.append('pdf_file', pdfFile);\r\n    formData.append('min_confidence', minConfidence.toString());\r\n    formData.append('rerun_if_exists', rerunIfExists.toString());\r\n\r\n    return api.post('/process', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n  },\r\n\r\n  getStatistics: () => api.get('/statistics'),\r\n  \r\n  getDashboardData: (minConfidence = 0.5) => \r\n    api.get('/dashboard', { \r\n      params: { min_confidence: minConfidence },\r\n      timeout: 10000\r\n    }),\r\n    \r\n  getCompanies: () => api.get('/companies'),\r\n  \r\n  getCompanyData: (companyName, minConfidence = 0.5) =>\r\n    api.get(`/company/${encodeURIComponent(companyName)}`, {\r\n      params: { min_confidence: minConfidence }\r\n    }),\r\n    \r\n  getComparisonData: (companies, compareBy = 'topic_fr', minConfidence = 0.5) => {\r\n    const params = new URLSearchParams();\r\n    companies.forEach(company => params.append('companies', company));\r\n    params.append('compare_by', compareBy);\r\n    params.append('min_confidence', minConfidence.toString());\r\n    \r\n    return api.get('/comparison', { params });\r\n  },\r\n};\r\n\r\nexport default apiService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B,CAAC,CAAE;;AAEnD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EACT,IAAIA,KAAK,CAACC,IAAI,KAAK,cAAc,EAAE;IACjC,MAAM,IAAIC,KAAK,CAAC,uFAAuF,CAAC;EAC1G;EACA,MAAMF,KAAK;AACb,CACF,CAAC;AAED,OAAO,MAAMG,UAAU,GAAG;EACxBC,WAAW,EAAEA,CAAA,KAAMX,GAAG,CAACY,GAAG,CAAC,SAAS,CAAC;EAErCC,UAAU,EAAEA,CAACC,OAAO,EAAEC,OAAO,EAAEC,aAAa,GAAG,GAAG,EAAEC,aAAa,GAAG,KAAK,KAAK;IAC5E,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEN,OAAO,CAAC;IACpCI,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEL,OAAO,CAAC;IACpCG,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAEJ,aAAa,CAACK,QAAQ,CAAC,CAAC,CAAC;IAC3DH,QAAQ,CAACE,MAAM,CAAC,iBAAiB,EAAEH,aAAa,CAACI,QAAQ,CAAC,CAAC,CAAC;IAE5D,OAAOrB,GAAG,CAACsB,IAAI,CAAC,UAAU,EAAEJ,QAAQ,EAAE;MACpCK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ,CAAC;EAEDC,aAAa,EAAEA,CAAA,KAAMxB,GAAG,CAACY,GAAG,CAAC,aAAa,CAAC;EAE3Ca,gBAAgB,EAAEA,CAACT,aAAa,GAAG,GAAG,KACpChB,GAAG,CAACY,GAAG,CAAC,YAAY,EAAE;IACpBc,MAAM,EAAE;MAAEC,cAAc,EAAEX;IAAc,CAAC;IACzCb,OAAO,EAAE;EACX,CAAC,CAAC;EAEJyB,YAAY,EAAEA,CAAA,KAAM5B,GAAG,CAACY,GAAG,CAAC,YAAY,CAAC;EAEzCiB,cAAc,EAAEA,CAACC,WAAW,EAAEd,aAAa,GAAG,GAAG,KAC/ChB,GAAG,CAACY,GAAG,CAAC,YAAYmB,kBAAkB,CAACD,WAAW,CAAC,EAAE,EAAE;IACrDJ,MAAM,EAAE;MAAEC,cAAc,EAAEX;IAAc;EAC1C,CAAC,CAAC;EAEJgB,iBAAiB,EAAEA,CAACC,SAAS,EAAEC,SAAS,GAAG,UAAU,EAAElB,aAAa,GAAG,GAAG,KAAK;IAC7E,MAAMU,MAAM,GAAG,IAAIS,eAAe,CAAC,CAAC;IACpCF,SAAS,CAACG,OAAO,CAACC,OAAO,IAAIX,MAAM,CAACN,MAAM,CAAC,WAAW,EAAEiB,OAAO,CAAC,CAAC;IACjEX,MAAM,CAACN,MAAM,CAAC,YAAY,EAAEc,SAAS,CAAC;IACtCR,MAAM,CAACN,MAAM,CAAC,gBAAgB,EAAEJ,aAAa,CAACK,QAAQ,CAAC,CAAC,CAAC;IAEzD,OAAOrB,GAAG,CAACY,GAAG,CAAC,aAAa,EAAE;MAAEc;IAAO,CAAC,CAAC;EAC3C;AACF,CAAC;AAED,eAAehB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
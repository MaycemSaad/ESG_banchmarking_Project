{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 300000 // 5 minutes timeout for large PDF processing\n});\n\n// Intercepteur pour les requêtes\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Intercepteur pour les réponses\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('API Error:', error);\n  if (error.response) {\n    // Server responded with error status\n    throw new Error(error.response.data.error || 'Server error');\n  } else if (error.request) {\n    // Network error\n    throw new Error('Network error: Unable to connect to server');\n  } else {\n    // Other error\n    throw new Error('An unexpected error occurred');\n  }\n});\nexport const apiService = {\n  // Health check\n  healthCheck: () => api.get('/health'),\n  // Process PDF\n  processPDF: (kpiFile, pdfFile, minConfidence = 0.5, rerunIfExists = false) => {\n    const formData = new FormData();\n    formData.append('kpi_file', kpiFile);\n    formData.append('pdf_file', pdfFile);\n    formData.append('min_confidence', minConfidence.toString());\n    formData.append('rerun_if_exists', rerunIfExists.toString());\n    return api.post('/process', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Get statistics\n  getStatistics: () => api.get('/statistics'),\n  // Get dashboard data\n  getDashboardData: (minConfidence = 0.5) => api.get('/dashboard', {\n    params: {\n      min_confidence: minConfidence\n    }\n  }),\n  // Get companies list\n  getCompanies: () => api.get('/companies'),\n  // Get company data\n  getCompanyData: (companyName, minConfidence = 0.5) => api.get(`/company/${encodeURIComponent(companyName)}`, {\n    params: {\n      min_confidence: minConfidence\n    }\n  }),\n  // Get comparison data\n  getComparisonData: (companies, compareBy = 'topic_fr', minConfidence = 0.5) => api.get('/comparison', {\n    params: {\n      companies: companies,\n      compare_by: compareBy,\n      min_confidence: minConfidence\n    }\n  }),\n  // Export data\n  exportCSV: () => api.get('/export/csv', {\n    responseType: 'blob'\n  }),\n  exportExcel: () => api.get('/export/excel', {\n    responseType: 'blob'\n  }),\n  exportCompanyData: (companyName, format = 'csv') => api.get(`/export/company/${encodeURIComponent(companyName)}`, {\n    params: {\n      format\n    },\n    responseType: 'blob'\n  })\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","Error","data","apiService","healthCheck","get","processPDF","kpiFile","pdfFile","minConfidence","rerunIfExists","formData","FormData","append","toString","post","headers","getStatistics","getDashboardData","params","min_confidence","getCompanies","getCompanyData","companyName","encodeURIComponent","getComparisonData","companies","compareBy","compare_by","exportCSV","responseType","exportExcel","exportCompanyData","format"],"sources":["C:/Users/informasud/Desktop/Projets/ESG_Banchmarking_Project/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 300000, // 5 minutes timeout for large PDF processing\r\n});\r\n\r\n// Intercepteur pour les requêtes\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`Making ${config.method?.toUpperCase()} request to ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Intercepteur pour les réponses\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    if (error.response) {\r\n      // Server responded with error status\r\n      throw new Error(error.response.data.error || 'Server error');\r\n    } else if (error.request) {\r\n      // Network error\r\n      throw new Error('Network error: Unable to connect to server');\r\n    } else {\r\n      // Other error\r\n      throw new Error('An unexpected error occurred');\r\n    }\r\n  }\r\n);\r\n\r\nexport const apiService = {\r\n  // Health check\r\n  healthCheck: () => api.get('/health'),\r\n\r\n  // Process PDF\r\n  processPDF: (kpiFile, pdfFile, minConfidence = 0.5, rerunIfExists = false) => {\r\n    const formData = new FormData();\r\n    formData.append('kpi_file', kpiFile);\r\n    formData.append('pdf_file', pdfFile);\r\n    formData.append('min_confidence', minConfidence.toString());\r\n    formData.append('rerun_if_exists', rerunIfExists.toString());\r\n\r\n    return api.post('/process', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n  },\r\n\r\n  // Get statistics\r\n  getStatistics: () => api.get('/statistics'),\r\n\r\n  // Get dashboard data\r\n  getDashboardData: (minConfidence = 0.5) => \r\n    api.get('/dashboard', { params: { min_confidence: minConfidence } }),\r\n\r\n  // Get companies list\r\n  getCompanies: () => api.get('/companies'),\r\n\r\n  // Get company data\r\n  getCompanyData: (companyName, minConfidence = 0.5) =>\r\n    api.get(`/company/${encodeURIComponent(companyName)}`, {\r\n      params: { min_confidence: minConfidence }\r\n    }),\r\n\r\n  // Get comparison data\r\n  getComparisonData: (companies, compareBy = 'topic_fr', minConfidence = 0.5) =>\r\n    api.get('/comparison', {\r\n      params: {\r\n        companies: companies,\r\n        compare_by: compareBy,\r\n        min_confidence: minConfidence\r\n      }\r\n    }),\r\n\r\n  // Export data\r\n  exportCSV: () => \r\n    api.get('/export/csv', { responseType: 'blob' }),\r\n\r\n  exportExcel: () =>\r\n    api.get('/export/excel', { responseType: 'blob' }),\r\n\r\n  exportCompanyData: (companyName, format = 'csv') =>\r\n    api.get(`/export/company/${encodeURIComponent(companyName)}`, {\r\n      params: { format },\r\n      responseType: 'blob'\r\n    }),\r\n};\r\n\r\nexport default apiService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE,MAAM,CAAE;AACnB,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EAAA,IAAAC,cAAA;EACVC,OAAO,CAACC,GAAG,CAAC,WAAAF,cAAA,GAAUD,MAAM,CAACI,MAAM,cAAAH,cAAA,uBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,eAAeL,MAAM,CAACM,GAAG,EAAE,CAAC;EAC9E,OAAON,MAAM;AACf,CAAC,EACAO,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,GAAG,CAACI,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC1BW,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACTL,OAAO,CAACK,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACA,MAAM,IAAIC,KAAK,CAACJ,KAAK,CAACG,QAAQ,CAACE,IAAI,CAACL,KAAK,IAAI,cAAc,CAAC;EAC9D,CAAC,MAAM,IAAIA,KAAK,CAACT,OAAO,EAAE;IACxB;IACA,MAAM,IAAIa,KAAK,CAAC,4CAA4C,CAAC;EAC/D,CAAC,MAAM;IACL;IACA,MAAM,IAAIA,KAAK,CAAC,8BAA8B,CAAC;EACjD;AACF,CACF,CAAC;AAED,OAAO,MAAME,UAAU,GAAG;EACxB;EACAC,WAAW,EAAEA,CAAA,KAAMrB,GAAG,CAACsB,GAAG,CAAC,SAAS,CAAC;EAErC;EACAC,UAAU,EAAEA,CAACC,OAAO,EAAEC,OAAO,EAAEC,aAAa,GAAG,GAAG,EAAEC,aAAa,GAAG,KAAK,KAAK;IAC5E,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEN,OAAO,CAAC;IACpCI,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEL,OAAO,CAAC;IACpCG,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAEJ,aAAa,CAACK,QAAQ,CAAC,CAAC,CAAC;IAC3DH,QAAQ,CAACE,MAAM,CAAC,iBAAiB,EAAEH,aAAa,CAACI,QAAQ,CAAC,CAAC,CAAC;IAE5D,OAAO/B,GAAG,CAACgC,IAAI,CAAC,UAAU,EAAEJ,QAAQ,EAAE;MACpCK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAC,aAAa,EAAEA,CAAA,KAAMlC,GAAG,CAACsB,GAAG,CAAC,aAAa,CAAC;EAE3C;EACAa,gBAAgB,EAAEA,CAACT,aAAa,GAAG,GAAG,KACpC1B,GAAG,CAACsB,GAAG,CAAC,YAAY,EAAE;IAAEc,MAAM,EAAE;MAAEC,cAAc,EAAEX;IAAc;EAAE,CAAC,CAAC;EAEtE;EACAY,YAAY,EAAEA,CAAA,KAAMtC,GAAG,CAACsB,GAAG,CAAC,YAAY,CAAC;EAEzC;EACAiB,cAAc,EAAEA,CAACC,WAAW,EAAEd,aAAa,GAAG,GAAG,KAC/C1B,GAAG,CAACsB,GAAG,CAAC,YAAYmB,kBAAkB,CAACD,WAAW,CAAC,EAAE,EAAE;IACrDJ,MAAM,EAAE;MAAEC,cAAc,EAAEX;IAAc;EAC1C,CAAC,CAAC;EAEJ;EACAgB,iBAAiB,EAAEA,CAACC,SAAS,EAAEC,SAAS,GAAG,UAAU,EAAElB,aAAa,GAAG,GAAG,KACxE1B,GAAG,CAACsB,GAAG,CAAC,aAAa,EAAE;IACrBc,MAAM,EAAE;MACNO,SAAS,EAAEA,SAAS;MACpBE,UAAU,EAAED,SAAS;MACrBP,cAAc,EAAEX;IAClB;EACF,CAAC,CAAC;EAEJ;EACAoB,SAAS,EAAEA,CAAA,KACT9C,GAAG,CAACsB,GAAG,CAAC,aAAa,EAAE;IAAEyB,YAAY,EAAE;EAAO,CAAC,CAAC;EAElDC,WAAW,EAAEA,CAAA,KACXhD,GAAG,CAACsB,GAAG,CAAC,eAAe,EAAE;IAAEyB,YAAY,EAAE;EAAO,CAAC,CAAC;EAEpDE,iBAAiB,EAAEA,CAACT,WAAW,EAAEU,MAAM,GAAG,KAAK,KAC7ClD,GAAG,CAACsB,GAAG,CAAC,mBAAmBmB,kBAAkB,CAACD,WAAW,CAAC,EAAE,EAAE;IAC5DJ,MAAM,EAAE;MAAEc;IAAO,CAAC;IAClBH,YAAY,EAAE;EAChB,CAAC;AACL,CAAC;AAED,eAAe3B,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
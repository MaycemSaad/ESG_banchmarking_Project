{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 300000 // 5 minutes timeout for large PDF processing\n});\n\n// Intercepteur pour les erreurs de réseau\napi.interceptors.response.use(response => response, error => {\n  if (error.code === 'ECONNREFUSED') {\n    throw new Error('Cannot connect to backend server. Make sure the Flask server is running on port 5000.');\n  }\n  if (error.response) {\n    // Server responded with error status\n    throw new Error(error.response.data.error || `Server error: ${error.response.status}`);\n  } else if (error.request) {\n    // Network error\n    throw new Error('Network error: Unable to connect to server');\n  } else {\n    // Other error\n    throw new Error('An unexpected error occurred');\n  }\n});\nexport const apiService = {\n  // Health check\n  healthCheck: () => api.get('/health'),\n  // Process PDF\n  processPDF: (kpiFile, pdfFile, minConfidence = 0.3, rerunIfExists = false) => {\n    const formData = new FormData();\n    formData.append('kpi_file', kpiFile);\n    formData.append('pdf_file', pdfFile);\n    formData.append('min_confidence', minConfidence.toString());\n    formData.append('rerun_if_exists', rerunIfExists.toString());\n    return api.post('/process', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Get statistics\n  getStatistics: () => api.get('/statistics'),\n  // Get dashboard data\n  getDashboardData: (minConfidence = 0.3) => api.get('/dashboard', {\n    params: {\n      min_confidence: minConfidence\n    }\n  }),\n  // Get companies list\n  getCompanies: () => api.get('/companies'),\n  // Get company data\n  getCompanyData: (companyName, minConfidence = 0.3) => api.get(`/company/${encodeURIComponent(companyName)}`, {\n    params: {\n      min_confidence: minConfidence\n    }\n  }),\n  // Get comparison data\n  getComparisonData: (companies, compareBy = 'topic_fr', minConfidence = 0.3) => {\n    const params = new URLSearchParams();\n    companies.forEach(company => params.append('companies', company));\n    params.append('compare_by', compareBy);\n    params.append('min_confidence', minConfidence.toString());\n    return api.get('/comparison', {\n      params\n    });\n  },\n  // Export data\n  exportCSV: () => api.get('/export/csv', {\n    responseType: 'blob'\n  }),\n  exportExcel: () => api.get('/export/excel', {\n    responseType: 'blob'\n  }),\n  exportCompanyData: (companyName, format = 'csv') => api.get(`/export/company/${encodeURIComponent(companyName)}`, {\n    params: {\n      format\n    },\n    responseType: 'blob'\n  }),\n  // =========================================================================\n  // CORRECTIONS POUR LE CHATBOT ESG - ENDPOINTS CORRECTS\n  // =========================================================================\n\n  // Chat avec l'assistant ESG - CORRIGÉ\n  esgChat: (question, conversationId = null) => {\n    const payload = {\n      question: question\n    };\n    if (conversationId) {\n      payload.conversation_id = conversationId;\n    }\n    return api.post('/chatbot/chat', payload);\n  },\n  // Obtenir les modèles disponibles - CORRIGÉ\n  getChatbotModels: () => api.get('/chatbot/models'),\n  // Obtenir le contexte du chatbot - CORRIGÉ\n  getChatbotContext: () => api.get('/chatbot/context'),\n  // Vérifier le statut du chatbot - CORRIGÉ\n  getChatbotStatus: () => api.get('/health'),\n  // Utilise le health check existant\n\n  // Benchmarking entre entreprises - NOUVEAU (si vous voulez l'implémenter)\n  esgBenchmark: (companies, kpiType = 'environmental') => {\n    return api.post('/chatbot/benchmark', {\n      companies,\n      kpi_type: kpiType\n    });\n  },\n  // Analyse comparative détaillée - NOUVEAU (si vous voulez l'implémenter)\n  detailedComparison: (company1, company2) => {\n    return api.post('/chatbot/compare', {\n      company1,\n      company2\n    });\n  },\n  // Recommandations personnalisées - NOUVEAU (si vous voulez l'implémenter)\n  esgRecommendations: (companyName, focusArea = 'all') => {\n    return api.post('/chatbot/recommendations', {\n      company_name: companyName,\n      focus_area: focusArea\n    });\n  },\n  // Recherche sémantique dans les données ESG - CORRIGÉ\n  semanticSearch: (query, topK = 5) => {\n    return api.post('/chatbot/search', {\n      query,\n      top_k: topK\n    });\n  },\n  // Analyse de tendances - NOUVEAU (si vous voulez l'implémenter)\n  trendAnalysis: (timeframe = 'all') => {\n    return api.post('/chatbot/trends', {\n      timeframe\n    });\n  },\n  // Gestion des conversations (si vous implémentez la persistance côté serveur)\n  getConversations: () => api.get('/chatbot/conversations'),\n  deleteConversation: conversationId => api.delete(`/chatbot/conversations/${conversationId}`),\n  updateConversation: (conversationId, updates) => api.put(`/chatbot/conversations/${conversationId}`, updates),\n  // Upload de PDF pour analyse spécifique (optionnel)\n  uploadPDFForAnalysis: (pdfFile, companyName = '') => {\n    const formData = new FormData();\n    formData.append('file', pdfFile);\n    if (companyName) {\n      formData.append('company_name', companyName);\n    }\n    return api.post('/upload-pdf', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Diagnostic du système (pour le debug)\n  debugVectorStore: () => api.get('/debug-vector-store'),\n  testDocumentSearch: (query, fileId) => {\n    return api.post('/test-document-search', {\n      query,\n      file_id: fileId\n    });\n  },\n  forceReloadIndex: () => api.post('/force-reload-index'),\n  // =========================================================================\n  // MÉTHODES UTILITAIRES POUR LE FRONTEND\n  // =========================================================================\n\n  // Télécharger les données pour le contexte du chatbot\n  downloadChatbotData: async () => {\n    try {\n      const [stats, companies, dashboard] = await Promise.all([this.getStatistics(), this.getCompanies(), this.getDashboardData()]);\n      return {\n        statistics: stats.data,\n        companies: companies.data,\n        dashboard: dashboard.data\n      };\n    } catch (error) {\n      console.error('Error downloading chatbot data:', error);\n      throw error;\n    }\n  },\n  // Vérifier la connexion Ollama\n  checkOllamaConnection: async () => {\n    try {\n      const response = await this.getChatbotStatus();\n      return {\n        connected: true,\n        status: response.data\n      };\n    } catch (error) {\n      return {\n        connected: false,\n        error: error.message\n      };\n    }\n  },\n  // Générer des suggestions de questions basées sur les données disponibles\n  generateQuestionSuggestions: async () => {\n    try {\n      const data = await this.downloadChatbotData();\n      const suggestions = [];\n      if (data.statistics.total_kpis > 0) {\n        suggestions.push(\"Quels sont les KPIs environnementaux les plus fréquents ?\", \"Quelle entreprise a le plus de données ESG extraites ?\", \"Quels sont les domaines ESG les mieux couverts ?\");\n      }\n      if (data.companies.length > 1) {\n        suggestions.push(\"Compare les performances ESG des différentes entreprises\", \"Quelle entreprise a les meilleures pratiques environnementales ?\", \"Quelles sont les tendances communes entre les entreprises ?\");\n      }\n      if (data.dashboard.metrics && data.dashboard.metrics.unique_topics > 0) {\n        suggestions.push(\"Donne-moi un résumé des données ESG disponibles\", \"Quels sont les sujets les plus abordés dans les rapports ?\", \"Y a-t-il des domaines ESG manquants dans l'analyse ?\");\n      }\n\n      // Suggestions par défaut si peu de données\n      if (suggestions.length === 0) {\n        suggestions.push(\"Qu'est-ce que l'analyse ESG ?\", \"Comment extraire des KPIs de documents PDF ?\", \"Quels sont les indicateurs ESG les plus importants ?\");\n      }\n      return suggestions.slice(0, 6); // Retourne max 6 suggestions\n    } catch (error) {\n      // Retourne des suggestions par défaut en cas d'erreur\n      return [\"Qu'est-ce que l'analyse ESG ?\", \"Comment fonctionne l'extraction de KPIs ?\", \"Quels types de données ESG peut-on extraire ?\", \"Comment comparer les performances ESG ?\", \"Quels sont les indicateurs environnementaux clés ?\", \"Comment améliorer le reporting ESG ?\"];\n    }\n  }\n};\n\n// Hook personnalisé pour le chatbot (si vous utilisez React)\nexport const useChatbot = () => {\n  const sendMessage = async (message, conversationId = null) => {\n    try {\n      const response = await apiService.esgChat(message, conversationId);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const getContext = async () => {\n    try {\n      const response = await apiService.getChatbotContext();\n      return {\n        success: true,\n        context: response.data.context\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const checkStatus = async () => {\n    try {\n      const response = await apiService.getChatbotStatus();\n      return {\n        success: true,\n        status: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  return {\n    sendMessage,\n    getContext,\n    checkStatus,\n    generateSuggestions: apiService.generateQuestionSuggestions\n  };\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","interceptors","response","use","error","code","Error","data","status","request","apiService","healthCheck","get","processPDF","kpiFile","pdfFile","minConfidence","rerunIfExists","formData","FormData","append","toString","post","headers","getStatistics","getDashboardData","params","min_confidence","getCompanies","getCompanyData","companyName","encodeURIComponent","getComparisonData","companies","compareBy","URLSearchParams","forEach","company","exportCSV","responseType","exportExcel","exportCompanyData","format","esgChat","question","conversationId","payload","conversation_id","getChatbotModels","getChatbotContext","getChatbotStatus","esgBenchmark","kpiType","kpi_type","detailedComparison","company1","company2","esgRecommendations","focusArea","company_name","focus_area","semanticSearch","query","topK","top_k","trendAnalysis","timeframe","getConversations","deleteConversation","delete","updateConversation","updates","put","uploadPDFForAnalysis","debugVectorStore","testDocumentSearch","fileId","file_id","forceReloadIndex","downloadChatbotData","stats","dashboard","Promise","all","statistics","console","checkOllamaConnection","connected","message","generateQuestionSuggestions","suggestions","total_kpis","push","length","metrics","unique_topics","slice","useChatbot","sendMessage","success","getContext","context","checkStatus","generateSuggestions"],"sources":["C:/Users/informasud/Desktop/Projets/ESG_Banchmarking_Project/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 300000, // 5 minutes timeout for large PDF processing\r\n});\r\n\r\n// Intercepteur pour les erreurs de réseau\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.code === 'ECONNREFUSED') {\r\n      throw new Error('Cannot connect to backend server. Make sure the Flask server is running on port 5000.');\r\n    }\r\n    if (error.response) {\r\n      // Server responded with error status\r\n      throw new Error(error.response.data.error || `Server error: ${error.response.status}`);\r\n    } else if (error.request) {\r\n      // Network error\r\n      throw new Error('Network error: Unable to connect to server');\r\n    } else {\r\n      // Other error\r\n      throw new Error('An unexpected error occurred');\r\n    }\r\n  }\r\n);\r\n\r\nexport const apiService = {\r\n  // Health check\r\n  healthCheck: () => api.get('/health'),\r\n\r\n  // Process PDF\r\n  processPDF: (kpiFile, pdfFile, minConfidence = 0.3, rerunIfExists = false) => {\r\n    const formData = new FormData();\r\n    formData.append('kpi_file', kpiFile);\r\n    formData.append('pdf_file', pdfFile);\r\n    formData.append('min_confidence', minConfidence.toString());\r\n    formData.append('rerun_if_exists', rerunIfExists.toString());\r\n\r\n    return api.post('/process', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n  },\r\n\r\n  // Get statistics\r\n  getStatistics: () => api.get('/statistics'),\r\n\r\n  // Get dashboard data\r\n  getDashboardData: (minConfidence = 0.3) => \r\n    api.get('/dashboard', { \r\n      params: { min_confidence: minConfidence }\r\n    }),\r\n\r\n  // Get companies list\r\n  getCompanies: () => api.get('/companies'),\r\n\r\n  // Get company data\r\n  getCompanyData: (companyName, minConfidence = 0.3) =>\r\n    api.get(`/company/${encodeURIComponent(companyName)}`, {\r\n      params: { min_confidence: minConfidence }\r\n    }),\r\n\r\n  // Get comparison data\r\n  getComparisonData: (companies, compareBy = 'topic_fr', minConfidence = 0.3) => {\r\n    const params = new URLSearchParams();\r\n    companies.forEach(company => params.append('companies', company));\r\n    params.append('compare_by', compareBy);\r\n    params.append('min_confidence', minConfidence.toString());\r\n    \r\n    return api.get('/comparison', { params });\r\n  },\r\n\r\n  // Export data\r\n  exportCSV: () => \r\n    api.get('/export/csv', { responseType: 'blob' }),\r\n\r\n  exportExcel: () =>\r\n    api.get('/export/excel', { responseType: 'blob' }),\r\n\r\n  exportCompanyData: (companyName, format = 'csv') =>\r\n    api.get(`/export/company/${encodeURIComponent(companyName)}`, {\r\n      params: { format },\r\n      responseType: 'blob'\r\n    }),\r\n\r\n  // =========================================================================\r\n  // CORRECTIONS POUR LE CHATBOT ESG - ENDPOINTS CORRECTS\r\n  // =========================================================================\r\n\r\n  // Chat avec l'assistant ESG - CORRIGÉ\r\n  esgChat: (question, conversationId = null) => {\r\n    const payload = {\r\n      question: question\r\n    };\r\n    \r\n    if (conversationId) {\r\n      payload.conversation_id = conversationId;\r\n    }\r\n\r\n    return api.post('/chatbot/chat', payload);\r\n  },\r\n\r\n  // Obtenir les modèles disponibles - CORRIGÉ\r\n  getChatbotModels: () => api.get('/chatbot/models'),\r\n\r\n  // Obtenir le contexte du chatbot - CORRIGÉ\r\n  getChatbotContext: () => api.get('/chatbot/context'),\r\n\r\n  // Vérifier le statut du chatbot - CORRIGÉ\r\n  getChatbotStatus: () => api.get('/health'), // Utilise le health check existant\r\n\r\n  // Benchmarking entre entreprises - NOUVEAU (si vous voulez l'implémenter)\r\n  esgBenchmark: (companies, kpiType = 'environmental') => {\r\n    return api.post('/chatbot/benchmark', {\r\n      companies,\r\n      kpi_type: kpiType\r\n    });\r\n  },\r\n\r\n  // Analyse comparative détaillée - NOUVEAU (si vous voulez l'implémenter)\r\n  detailedComparison: (company1, company2) => {\r\n    return api.post('/chatbot/compare', {\r\n      company1,\r\n      company2\r\n    });\r\n  },\r\n\r\n  // Recommandations personnalisées - NOUVEAU (si vous voulez l'implémenter)\r\n  esgRecommendations: (companyName, focusArea = 'all') => {\r\n    return api.post('/chatbot/recommendations', {\r\n      company_name: companyName,\r\n      focus_area: focusArea\r\n    });\r\n  },\r\n\r\n  // Recherche sémantique dans les données ESG - CORRIGÉ\r\n  semanticSearch: (query, topK = 5) => {\r\n    return api.post('/chatbot/search', {\r\n      query,\r\n      top_k: topK\r\n    });\r\n  },\r\n\r\n  // Analyse de tendances - NOUVEAU (si vous voulez l'implémenter)\r\n  trendAnalysis: (timeframe = 'all') => {\r\n    return api.post('/chatbot/trends', {\r\n      timeframe\r\n    });\r\n  },\r\n\r\n  // Gestion des conversations (si vous implémentez la persistance côté serveur)\r\n  getConversations: () => api.get('/chatbot/conversations'),\r\n  \r\n  deleteConversation: (conversationId) => \r\n    api.delete(`/chatbot/conversations/${conversationId}`),\r\n  \r\n  updateConversation: (conversationId, updates) =>\r\n    api.put(`/chatbot/conversations/${conversationId}`, updates),\r\n\r\n  // Upload de PDF pour analyse spécifique (optionnel)\r\n  uploadPDFForAnalysis: (pdfFile, companyName = '') => {\r\n    const formData = new FormData();\r\n    formData.append('file', pdfFile);\r\n    if (companyName) {\r\n      formData.append('company_name', companyName);\r\n    }\r\n\r\n    return api.post('/upload-pdf', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n  },\r\n\r\n  // Diagnostic du système (pour le debug)\r\n  debugVectorStore: () => api.get('/debug-vector-store'),\r\n  \r\n  testDocumentSearch: (query, fileId) => {\r\n    return api.post('/test-document-search', {\r\n      query,\r\n      file_id: fileId\r\n    });\r\n  },\r\n\r\n  forceReloadIndex: () => api.post('/force-reload-index'),\r\n\r\n  // =========================================================================\r\n  // MÉTHODES UTILITAIRES POUR LE FRONTEND\r\n  // =========================================================================\r\n\r\n  // Télécharger les données pour le contexte du chatbot\r\n  downloadChatbotData: async () => {\r\n    try {\r\n      const [stats, companies, dashboard] = await Promise.all([\r\n        this.getStatistics(),\r\n        this.getCompanies(),\r\n        this.getDashboardData()\r\n      ]);\r\n      \r\n      return {\r\n        statistics: stats.data,\r\n        companies: companies.data,\r\n        dashboard: dashboard.data\r\n      };\r\n    } catch (error) {\r\n      console.error('Error downloading chatbot data:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Vérifier la connexion Ollama\r\n  checkOllamaConnection: async () => {\r\n    try {\r\n      const response = await this.getChatbotStatus();\r\n      return {\r\n        connected: true,\r\n        status: response.data\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        connected: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  },\r\n\r\n  // Générer des suggestions de questions basées sur les données disponibles\r\n  generateQuestionSuggestions: async () => {\r\n    try {\r\n      const data = await this.downloadChatbotData();\r\n      const suggestions = [];\r\n      \r\n      if (data.statistics.total_kpis > 0) {\r\n        suggestions.push(\r\n          \"Quels sont les KPIs environnementaux les plus fréquents ?\",\r\n          \"Quelle entreprise a le plus de données ESG extraites ?\",\r\n          \"Quels sont les domaines ESG les mieux couverts ?\"\r\n        );\r\n      }\r\n      \r\n      if (data.companies.length > 1) {\r\n        suggestions.push(\r\n          \"Compare les performances ESG des différentes entreprises\",\r\n          \"Quelle entreprise a les meilleures pratiques environnementales ?\",\r\n          \"Quelles sont les tendances communes entre les entreprises ?\"\r\n        );\r\n      }\r\n      \r\n      if (data.dashboard.metrics && data.dashboard.metrics.unique_topics > 0) {\r\n        suggestions.push(\r\n          \"Donne-moi un résumé des données ESG disponibles\",\r\n          \"Quels sont les sujets les plus abordés dans les rapports ?\",\r\n          \"Y a-t-il des domaines ESG manquants dans l'analyse ?\"\r\n        );\r\n      }\r\n      \r\n      // Suggestions par défaut si peu de données\r\n      if (suggestions.length === 0) {\r\n        suggestions.push(\r\n          \"Qu'est-ce que l'analyse ESG ?\",\r\n          \"Comment extraire des KPIs de documents PDF ?\",\r\n          \"Quels sont les indicateurs ESG les plus importants ?\"\r\n        );\r\n      }\r\n      \r\n      return suggestions.slice(0, 6); // Retourne max 6 suggestions\r\n    } catch (error) {\r\n      // Retourne des suggestions par défaut en cas d'erreur\r\n      return [\r\n        \"Qu'est-ce que l'analyse ESG ?\",\r\n        \"Comment fonctionne l'extraction de KPIs ?\",\r\n        \"Quels types de données ESG peut-on extraire ?\",\r\n        \"Comment comparer les performances ESG ?\",\r\n        \"Quels sont les indicateurs environnementaux clés ?\",\r\n        \"Comment améliorer le reporting ESG ?\"\r\n      ];\r\n    }\r\n  }\r\n};\r\n\r\n// Hook personnalisé pour le chatbot (si vous utilisez React)\r\nexport const useChatbot = () => {\r\n  const sendMessage = async (message, conversationId = null) => {\r\n    try {\r\n      const response = await apiService.esgChat(message, conversationId);\r\n      return {\r\n        success: true,\r\n        data: response.data\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  };\r\n\r\n  const getContext = async () => {\r\n    try {\r\n      const response = await apiService.getChatbotContext();\r\n      return {\r\n        success: true,\r\n        context: response.data.context\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  };\r\n\r\n  const checkStatus = async () => {\r\n    try {\r\n      const response = await apiService.getChatbotStatus();\r\n      return {\r\n        success: true,\r\n        status: response.data\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  };\r\n\r\n  return {\r\n    sendMessage,\r\n    getContext,\r\n    checkStatus,\r\n    generateSuggestions: apiService.generateQuestionSuggestions\r\n  };\r\n};\r\n\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
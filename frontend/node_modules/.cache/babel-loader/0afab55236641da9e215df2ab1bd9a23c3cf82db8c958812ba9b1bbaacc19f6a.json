{"ast":null,"code":"import axios from 'axios';\n\n// Configuration séparée pour le chatbot (port 5001)\nconst CHATBOT_API_BASE_URL = 'http://127.0.0.1:5001/api';\nconst chatbotApi = axios.create({\n  baseURL: CHATBOT_API_BASE_URL,\n  timeout: 300000 // 5 minutes timeout for large PDF processing\n});\n\n// Intercepteur pour les erreurs de réseau spécifique au chatbot\nchatbotApi.interceptors.response.use(response => response, error => {\n  if (error.code === 'ECONNREFUSED') {\n    throw new Error('Cannot connect to chatbot server. Make sure the Flask chatbot server is running on port 5001.');\n  }\n  if (error.response) {\n    // Server responded with error status\n    throw new Error(error.response.data.error || `Chatbot server error: ${error.response.status}`);\n  } else if (error.request) {\n    // Network error\n    throw new Error('Network error: Unable to connect to chatbot server');\n  } else {\n    // Other error\n    throw new Error('An unexpected error occurred with chatbot service');\n  }\n});\n\n// Configuration pour l'API principale (port 5000 - inchangée)\nconst MAIN_API_BASE_URL = 'http://127.0.0.1:5000/api';\nconst mainApi = axios.create({\n  baseURL: MAIN_API_BASE_URL,\n  timeout: 300000\n});\nmainApi.interceptors.response.use(response => response, error => {\n  if (error.code === 'ECONNREFUSED') {\n    throw new Error('Cannot connect to main server. Make sure the main Flask server is running on port 5000.');\n  }\n  if (error.response) {\n    throw new Error(error.response.data.error || `Main server error: ${error.response.status}`);\n  } else if (error.request) {\n    throw new Error('Network error: Unable to connect to main server');\n  } else {\n    throw new Error('An unexpected error occurred with main service');\n  }\n});\nexport const apiService = {\n  // =========================================================================\n  // MÉTHODES POUR LE CHATBOT ESG (port 5001)\n  // =========================================================================\n\n  // Chat avec l'assistant ESG\n  esgChat: (message, companyName = '', pdfData = null) => {\n    return chatbotApi.post('/esg-chat', {\n      message,\n      company_name: companyName,\n      pdf_data: pdfData\n    });\n  },\n  // Upload de PDF pour analyse dans le chatbot\n  uploadPDFForAnalysis: (pdfFile, kpiFile) => {\n    const formData = new FormData();\n    formData.append('pdf_file', pdfFile);\n    formData.append('kpi_file', kpiFile);\n    return chatbotApi.post('/chat-upload-pdf', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Statut du chatbot\n  getChatbotStatus: () => chatbotApi.get('/chatbot-status'),\n  // Benchmarking entre entreprises (chatbot)\n  esgBenchmark: companies => {\n    return chatbotApi.post('/esg-benchmark', {\n      companies\n    });\n  },\n  // Recommandations personnalisées (chatbot)\n  esgRecommendations: companyName => {\n    return chatbotApi.post('/esg-recommendations', {\n      company_name: companyName\n    });\n  },\n  // =========================================================================\n  // MÉTHODES POUR L'API PRINCIPALE (port 5000 - inchangées)\n  // =========================================================================\n\n  // Health check\n  healthCheck: () => mainApi.get('/health'),\n  // Process PDF\n  processPDF: (kpiFile, pdfFile, minConfidence = 0.3, rerunIfExists = false) => {\n    const formData = new FormData();\n    formData.append('kpi_file', kpiFile);\n    formData.append('pdf_file', pdfFile);\n    formData.append('min_confidence', minConfidence.toString());\n    formData.append('rerun_if_exists', rerunIfExists.toString());\n    return mainApi.post('/process', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Get statistics\n  getStatistics: () => mainApi.get('/statistics'),\n  // Get dashboard data\n  getDashboardData: (minConfidence = 0.3) => mainApi.get('/dashboard', {\n    params: {\n      min_confidence: minConfidence\n    }\n  }),\n  // Get companies list\n  getCompanies: () => mainApi.get('/companies'),\n  // Get company data\n  getCompanyData: (companyName, minConfidence = 0.3) => mainApi.get(`/company/${encodeURIComponent(companyName)}`, {\n    params: {\n      min_confidence: minConfidence\n    }\n  }),\n  // Get comparison data\n  getComparisonData: (companies, compareBy = 'topic_fr', minConfidence = 0.3) => {\n    const params = new URLSearchParams();\n    companies.forEach(company => params.append('companies', company));\n    params.append('compare_by', compareBy);\n    params.append('min_confidence', minConfidence.toString());\n    return mainApi.get('/comparison', {\n      params\n    });\n  },\n  // Export data\n  exportCSV: () => mainApi.get('/export/csv', {\n    responseType: 'blob'\n  }),\n  exportExcel: () => mainApi.get('/export/excel', {\n    responseType: 'blob'\n  }),\n  exportCompanyData: (companyName, format = 'csv') => mainApi.get(`/export/company/${encodeURIComponent(companyName)}`, {\n    params: {\n      format\n    },\n    responseType: 'blob'\n  }),\n  // =========================================================================\n  // MÉTHODES DÉPRÉCIÉES OU ALTERNATIVES (maintenues pour compatibilité)\n  // =========================================================================\n\n  // Upload de PDF pour analyse spécifique (méthode alternative)\n  uploadPDFForAnalysisLegacy: (pdfFile, companyName = '') => {\n    const formData = new FormData();\n    formData.append('file', pdfFile);\n    if (companyName) {\n      formData.append('company_name', companyName);\n    }\n    return mainApi.post('/upload-pdf', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Chat avec un PDF spécifique (méthode alternative)\n  chatWithPDF: (message, fileId) => {\n    return mainApi.post('/chat-with-pdf', {\n      message,\n      file_id: fileId\n    });\n  },\n  // Recherche sémantique dans les données ESG\n  semanticSearch: (query, topK = 5) => {\n    return mainApi.post('/search', {\n      query,\n      top_k: topK\n    });\n  },\n  // Diagnostic du système (pour le debug)\n  debugVectorStore: () => mainApi.get('/debug-vector-store'),\n  testDocumentSearch: (query, fileId) => {\n    return mainApi.post('/test-document-search', {\n      query,\n      file_id: fileId\n    });\n  },\n  forceReloadIndex: () => mainApi.post('/force-reload-index')\n};\n\n// Export séparé pour une utilisation spécifique si nécessaire\nexport const chatbotService = {\n  esgChat: apiService.esgChat,\n  uploadPDFForAnalysis: apiService.uploadPDFForAnalysis,\n  getChatbotStatus: apiService.getChatbotStatus,\n  esgBenchmark: apiService.esgBenchmark,\n  esgRecommendations: apiService.esgRecommendations\n};\nexport const mainApiService = {\n  healthCheck: apiService.healthCheck,\n  processPDF: apiService.processPDF,\n  getStatistics: apiService.getStatistics,\n  getDashboardData: apiService.getDashboardData,\n  getCompanies: apiService.getCompanies,\n  getCompanyData: apiService.getCompanyData,\n  getComparisonData: apiService.getComparisonData,\n  exportCSV: apiService.exportCSV,\n  exportExcel: apiService.exportExcel,\n  exportCompanyData: apiService.exportCompanyData\n};\nexport default apiService;","map":{"version":3,"names":["axios","CHATBOT_API_BASE_URL","chatbotApi","create","baseURL","timeout","interceptors","response","use","error","code","Error","data","status","request","MAIN_API_BASE_URL","mainApi","apiService","esgChat","message","companyName","pdfData","post","company_name","pdf_data","uploadPDFForAnalysis","pdfFile","kpiFile","formData","FormData","append","headers","getChatbotStatus","get","esgBenchmark","companies","esgRecommendations","healthCheck","processPDF","minConfidence","rerunIfExists","toString","getStatistics","getDashboardData","params","min_confidence","getCompanies","getCompanyData","encodeURIComponent","getComparisonData","compareBy","URLSearchParams","forEach","company","exportCSV","responseType","exportExcel","exportCompanyData","format","uploadPDFForAnalysisLegacy","chatWithPDF","fileId","file_id","semanticSearch","query","topK","top_k","debugVectorStore","testDocumentSearch","forceReloadIndex","chatbotService","mainApiService"],"sources":["C:/Users/informasud/Desktop/Projets/ESG_Banchmarking_Project/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Configuration séparée pour le chatbot (port 5001)\r\nconst CHATBOT_API_BASE_URL = 'http://127.0.0.1:5001/api';\r\n\r\nconst chatbotApi = axios.create({\r\n  baseURL: CHATBOT_API_BASE_URL,\r\n  timeout: 300000, // 5 minutes timeout for large PDF processing\r\n});\r\n\r\n// Intercepteur pour les erreurs de réseau spécifique au chatbot\r\nchatbotApi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.code === 'ECONNREFUSED') {\r\n      throw new Error('Cannot connect to chatbot server. Make sure the Flask chatbot server is running on port 5001.');\r\n    }\r\n    if (error.response) {\r\n      // Server responded with error status\r\n      throw new Error(error.response.data.error || `Chatbot server error: ${error.response.status}`);\r\n    } else if (error.request) {\r\n      // Network error\r\n      throw new Error('Network error: Unable to connect to chatbot server');\r\n    } else {\r\n      // Other error\r\n      throw new Error('An unexpected error occurred with chatbot service');\r\n    }\r\n  }\r\n);\r\n\r\n// Configuration pour l'API principale (port 5000 - inchangée)\r\nconst MAIN_API_BASE_URL = 'http://127.0.0.1:5000/api';\r\n\r\nconst mainApi = axios.create({\r\n  baseURL: MAIN_API_BASE_URL,\r\n  timeout: 300000,\r\n});\r\n\r\nmainApi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.code === 'ECONNREFUSED') {\r\n      throw new Error('Cannot connect to main server. Make sure the main Flask server is running on port 5000.');\r\n    }\r\n    if (error.response) {\r\n      throw new Error(error.response.data.error || `Main server error: ${error.response.status}`);\r\n    } else if (error.request) {\r\n      throw new Error('Network error: Unable to connect to main server');\r\n    } else {\r\n      throw new Error('An unexpected error occurred with main service');\r\n    }\r\n  }\r\n);\r\n\r\nexport const apiService = {\r\n  // =========================================================================\r\n  // MÉTHODES POUR LE CHATBOT ESG (port 5001)\r\n  // =========================================================================\r\n\r\n  // Chat avec l'assistant ESG\r\n  esgChat: (message, companyName = '', pdfData = null) => {\r\n    return chatbotApi.post('/esg-chat', {\r\n      message,\r\n      company_name: companyName,\r\n      pdf_data: pdfData\r\n    });\r\n  },\r\n\r\n  // Upload de PDF pour analyse dans le chatbot\r\n  uploadPDFForAnalysis: (pdfFile, kpiFile) => {\r\n    const formData = new FormData();\r\n    formData.append('pdf_file', pdfFile);\r\n    formData.append('kpi_file', kpiFile);\r\n\r\n    return chatbotApi.post('/chat-upload-pdf', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n  },\r\n\r\n  // Statut du chatbot\r\n  getChatbotStatus: () => chatbotApi.get('/chatbot-status'),\r\n\r\n  // Benchmarking entre entreprises (chatbot)\r\n  esgBenchmark: (companies) => {\r\n    return chatbotApi.post('/esg-benchmark', {\r\n      companies\r\n    });\r\n  },\r\n\r\n  // Recommandations personnalisées (chatbot)\r\n  esgRecommendations: (companyName) => {\r\n    return chatbotApi.post('/esg-recommendations', {\r\n      company_name: companyName\r\n    });\r\n  },\r\n\r\n  // =========================================================================\r\n  // MÉTHODES POUR L'API PRINCIPALE (port 5000 - inchangées)\r\n  // =========================================================================\r\n\r\n  // Health check\r\n  healthCheck: () => mainApi.get('/health'),\r\n\r\n  // Process PDF\r\n  processPDF: (kpiFile, pdfFile, minConfidence = 0.3, rerunIfExists = false) => {\r\n    const formData = new FormData();\r\n    formData.append('kpi_file', kpiFile);\r\n    formData.append('pdf_file', pdfFile);\r\n    formData.append('min_confidence', minConfidence.toString());\r\n    formData.append('rerun_if_exists', rerunIfExists.toString());\r\n\r\n    return mainApi.post('/process', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n  },\r\n\r\n  // Get statistics\r\n  getStatistics: () => mainApi.get('/statistics'),\r\n\r\n  // Get dashboard data\r\n  getDashboardData: (minConfidence = 0.3) => \r\n    mainApi.get('/dashboard', { \r\n      params: { min_confidence: minConfidence }\r\n    }),\r\n\r\n  // Get companies list\r\n  getCompanies: () => mainApi.get('/companies'),\r\n\r\n  // Get company data\r\n  getCompanyData: (companyName, minConfidence = 0.3) =>\r\n    mainApi.get(`/company/${encodeURIComponent(companyName)}`, {\r\n      params: { min_confidence: minConfidence }\r\n    }),\r\n\r\n  // Get comparison data\r\n  getComparisonData: (companies, compareBy = 'topic_fr', minConfidence = 0.3) => {\r\n    const params = new URLSearchParams();\r\n    companies.forEach(company => params.append('companies', company));\r\n    params.append('compare_by', compareBy);\r\n    params.append('min_confidence', minConfidence.toString());\r\n    \r\n    return mainApi.get('/comparison', { params });\r\n  },\r\n\r\n  // Export data\r\n  exportCSV: () => \r\n    mainApi.get('/export/csv', { responseType: 'blob' }),\r\n\r\n  exportExcel: () =>\r\n    mainApi.get('/export/excel', { responseType: 'blob' }),\r\n\r\n  exportCompanyData: (companyName, format = 'csv') =>\r\n    mainApi.get(`/export/company/${encodeURIComponent(companyName)}`, {\r\n      params: { format },\r\n      responseType: 'blob'\r\n    }),\r\n\r\n  // =========================================================================\r\n  // MÉTHODES DÉPRÉCIÉES OU ALTERNATIVES (maintenues pour compatibilité)\r\n  // =========================================================================\r\n\r\n  // Upload de PDF pour analyse spécifique (méthode alternative)\r\n  uploadPDFForAnalysisLegacy: (pdfFile, companyName = '') => {\r\n    const formData = new FormData();\r\n    formData.append('file', pdfFile);\r\n    if (companyName) {\r\n      formData.append('company_name', companyName);\r\n    }\r\n\r\n    return mainApi.post('/upload-pdf', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n  },\r\n\r\n  // Chat avec un PDF spécifique (méthode alternative)\r\n  chatWithPDF: (message, fileId) => {\r\n    return mainApi.post('/chat-with-pdf', {\r\n      message,\r\n      file_id: fileId\r\n    });\r\n  },\r\n\r\n  // Recherche sémantique dans les données ESG\r\n  semanticSearch: (query, topK = 5) => {\r\n    return mainApi.post('/search', {\r\n      query,\r\n      top_k: topK\r\n    });\r\n  },\r\n\r\n  // Diagnostic du système (pour le debug)\r\n  debugVectorStore: () => mainApi.get('/debug-vector-store'),\r\n  \r\n  testDocumentSearch: (query, fileId) => {\r\n    return mainApi.post('/test-document-search', {\r\n      query,\r\n      file_id: fileId\r\n    });\r\n  },\r\n\r\n  forceReloadIndex: () => mainApi.post('/force-reload-index')\r\n};\r\n\r\n// Export séparé pour une utilisation spécifique si nécessaire\r\nexport const chatbotService = {\r\n  esgChat: apiService.esgChat,\r\n  uploadPDFForAnalysis: apiService.uploadPDFForAnalysis,\r\n  getChatbotStatus: apiService.getChatbotStatus,\r\n  esgBenchmark: apiService.esgBenchmark,\r\n  esgRecommendations: apiService.esgRecommendations\r\n};\r\n\r\nexport const mainApiService = {\r\n  healthCheck: apiService.healthCheck,\r\n  processPDF: apiService.processPDF,\r\n  getStatistics: apiService.getStatistics,\r\n  getDashboardData: apiService.getDashboardData,\r\n  getCompanies: apiService.getCompanies,\r\n  getCompanyData: apiService.getCompanyData,\r\n  getComparisonData: apiService.getComparisonData,\r\n  exportCSV: apiService.exportCSV,\r\n  exportExcel: apiService.exportExcel,\r\n  exportCompanyData: apiService.exportCompanyData\r\n};\r\n\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}